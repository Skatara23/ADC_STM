
ADC_TEST_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c4c  08002c4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c4c  08002c4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c4c  08002c4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  08002cc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002cc4  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f88  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001654  00000000  00000000  00028021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00029678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00029dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172cb  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fe7  00000000  00000000  0004173b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ef7  00000000  00000000  0004a722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002044  00000000  00000000  000cf66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bb8 	.word	0x08002bb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002bb8 	.word	0x08002bb8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fa43 	bl	80005ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f82d 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8e3 	bl	8000334 <MX_GPIO_Init>
  MX_ADC1_Init();
 800016e:	f000 f879 	bl	8000264 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8b5 	bl	80002e0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start( &hadc1);
 8000176:	4810      	ldr	r0, [pc, #64]	; (80001b8 <main+0x5c>)
 8000178:	f000 fb72 	bl	8000860 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion( &hadc1,10000);
 800017c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000180:	480d      	ldr	r0, [pc, #52]	; (80001b8 <main+0x5c>)
 8000182:	f000 fc1b 	bl	80009bc <HAL_ADC_PollForConversion>

	  test =HAL_ADC_GetValue( &hadc1);
 8000186:	480c      	ldr	r0, [pc, #48]	; (80001b8 <main+0x5c>)
 8000188:	f000 fd1e 	bl	8000bc8 <HAL_ADC_GetValue>
 800018c:	4603      	mov	r3, r0
 800018e:	81fb      	strh	r3, [r7, #14]

	  sprintf(msg,"%hu\r\n",test);
 8000190:	89fa      	ldrh	r2, [r7, #14]
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	4909      	ldr	r1, [pc, #36]	; (80001bc <main+0x60>)
 8000196:	4618      	mov	r0, r3
 8000198:	f002 f894 	bl	80022c4 <siprintf>

	  HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),10000);
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	4618      	mov	r0, r3
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	1d39      	adds	r1, r7, #4
 80001aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80001ae:	4804      	ldr	r0, [pc, #16]	; (80001c0 <main+0x64>)
 80001b0:	f001 fed6 	bl	8001f60 <HAL_UART_Transmit>
  {
 80001b4:	e7df      	b.n	8000176 <main+0x1a>
 80001b6:	bf00      	nop
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	08002bd0 	.word	0x08002bd0
 80001c0:	200000bc 	.word	0x200000bc

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	; 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 f86e 	bl	80022b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f4:	2302      	movs	r3, #2
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fc:	2310      	movs	r3, #16
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000200:	2300      	movs	r3, #0
 8000202:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000208:	4618      	mov	r0, r3
 800020a:	f001 f8dd 	bl	80013c8 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000214:	f000 f8b0 	bl	8000378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021c:	2300      	movs	r3, #0
 800021e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fb4a 	bl	80018cc <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800023e:	f000 f89b 	bl	8000378 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000242:	2302      	movs	r3, #2
 8000244:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f001 fccb 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000258:	f000 f88e 	bl	8000378 <Error_Handler>
  }
}
 800025c:	bf00      	nop
 800025e:	3750      	adds	r7, #80	; 0x50
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000274:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <MX_ADC1_Init+0x74>)
 8000276:	4a19      	ldr	r2, [pc, #100]	; (80002dc <MX_ADC1_Init+0x78>)
 8000278:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <MX_ADC1_Init+0x74>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <MX_ADC1_Init+0x74>)
 8000282:	2200      	movs	r2, #0
 8000284:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000286:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <MX_ADC1_Init+0x74>)
 8000288:	2200      	movs	r2, #0
 800028a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_ADC1_Init+0x74>)
 800028e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000292:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <MX_ADC1_Init+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_ADC1_Init+0x74>)
 800029c:	2201      	movs	r2, #1
 800029e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <MX_ADC1_Init+0x74>)
 80002a2:	f000 fa05 	bl	80006b0 <HAL_ADC_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002ac:	f000 f864 	bl	8000378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b4:	2301      	movs	r3, #1
 80002b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4619      	mov	r1, r3
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <MX_ADC1_Init+0x74>)
 80002c2:	f000 fc8d 	bl	8000be0 <HAL_ADC_ConfigChannel>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002cc:	f000 f854 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	40012400 	.word	0x40012400

080002e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_USART1_UART_Init+0x50>)
 80002e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000318:	f001 fdd2 	bl	8001ec0 <HAL_UART_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000322:	f000 f829 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000bc 	.word	0x200000bc
 8000330:	40013800 	.word	0x40013800

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_GPIO_Init+0x40>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <MX_GPIO_Init+0x40>)
 8000340:	f043 0320 	orr.w	r3, r3, #32
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0320 	and.w	r3, r3, #32
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a07      	ldr	r2, [pc, #28]	; (8000374 <MX_GPIO_Init+0x40>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <MX_GPIO_Init+0x40>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f003 0304 	and.w	r3, r3, #4
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000380:	e7fe      	b.n	8000380 <Error_Handler+0x8>
	...

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <HAL_MspInit+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <HAL_MspInit+0x40>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <HAL_MspInit+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <HAL_MspInit+0x40>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <HAL_MspInit+0x40>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <HAL_MspInit+0x40>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000

080003c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <HAL_ADC_MspInit+0x6c>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d121      	bne.n	800042c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <HAL_ADC_MspInit+0x70>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a12      	ldr	r2, [pc, #72]	; (8000438 <HAL_ADC_MspInit+0x70>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <HAL_ADC_MspInit+0x70>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <HAL_ADC_MspInit+0x70>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <HAL_ADC_MspInit+0x70>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_ADC_MspInit+0x70>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000418:	2301      	movs	r3, #1
 800041a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041c:	2303      	movs	r3, #3
 800041e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <HAL_ADC_MspInit+0x74>)
 8000428:	f000 fe52 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40012400 	.word	0x40012400
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800

08000440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <HAL_UART_MspInit+0x8c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d131      	bne.n	80004c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <HAL_UART_MspInit+0x90>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a1a      	ldr	r2, [pc, #104]	; (80004d0 <HAL_UART_MspInit+0x90>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <HAL_UART_MspInit+0x90>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_UART_MspInit+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <HAL_UART_MspInit+0x90>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_UART_MspInit+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049a:	2303      	movs	r3, #3
 800049c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	480b      	ldr	r0, [pc, #44]	; (80004d4 <HAL_UART_MspInit+0x94>)
 80004a6:	f000 fe13 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <HAL_UART_MspInit+0x94>)
 80004c0:	f000 fe06 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40013800 	.word	0x40013800
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051e:	f000 f8ab 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <_sbrk+0x5c>)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_sbrk+0x60>)
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <_sbrk+0x64>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <_sbrk+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d207      	bcs.n	8000568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000558:	f001 fe82 	bl	8002260 <__errno>
 800055c:	4603      	mov	r3, r0
 800055e:	220c      	movs	r2, #12
 8000560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	e009      	b.n	800057c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <_sbrk+0x64>)
 8000578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20002800 	.word	0x20002800
 8000588:	00000400 	.word	0x00000400
 800058c:	20000104 	.word	0x20000104
 8000590:	20000120 	.word	0x20000120

08000594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f7ff fff8 	bl	8000594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005a6:	490c      	ldr	r1, [pc, #48]	; (80005d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005a8:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005bc:	4c09      	ldr	r4, [pc, #36]	; (80005e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f001 fe4f 	bl	800226c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ce:	f7ff fdc5 	bl	800015c <main>
  bx lr
 80005d2:	4770      	bx	lr
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005dc:	08002c54 	.word	0x08002c54
  ldr r2, =_sbss
 80005e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005e4:	2000011c 	.word	0x2000011c

080005e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_2_IRQHandler>
	...

080005ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_Init+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_Init+0x28>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 fd33 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000602:	200f      	movs	r0, #15
 8000604:	f000 f808 	bl	8000618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000608:	f7ff febc 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40022000 	.word	0x40022000

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x58>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fd3d 	bl	80010b6 <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e00e      	b.n	8000664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d80a      	bhi.n	8000662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 fd13 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <HAL_InitTick+0x5c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000000 	.word	0x20000000
 8000670:	20000008 	.word	0x20000008
 8000674:	20000004 	.word	0x20000004

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x1c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x20>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_IncTick+0x20>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000008 	.word	0x20000008
 8000698:	20000108 	.word	0x20000108

0800069c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b02      	ldr	r3, [pc, #8]	; (80006ac <HAL_GetTick+0x10>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	20000108 	.word	0x20000108

080006b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b8:	2300      	movs	r3, #0
 80006ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e0be      	b.n	8000850 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fe6a 	bl	80003c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 fbc5 	bl	8000e84 <ADC_ConversionStop_Disable>
 80006fa:	4603      	mov	r3, r0
 80006fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000702:	f003 0310 	and.w	r3, r3, #16
 8000706:	2b00      	cmp	r3, #0
 8000708:	f040 8099 	bne.w	800083e <HAL_ADC_Init+0x18e>
 800070c:	7dfb      	ldrb	r3, [r7, #23]
 800070e:	2b00      	cmp	r3, #0
 8000710:	f040 8095 	bne.w	800083e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000718:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800071c:	f023 0302 	bic.w	r3, r3, #2
 8000720:	f043 0202 	orr.w	r2, r3, #2
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000730:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7b1b      	ldrb	r3, [r3, #12]
 8000736:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000738:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	4313      	orrs	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000748:	d003      	beq.n	8000752 <HAL_ADC_Init+0xa2>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d102      	bne.n	8000758 <HAL_ADC_Init+0xa8>
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	e000      	b.n	800075a <HAL_ADC_Init+0xaa>
 8000758:	2300      	movs	r3, #0
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	4313      	orrs	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d119      	bne.n	800079c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7b1b      	ldrb	r3, [r3, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d109      	bne.n	8000784 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	3b01      	subs	r3, #1
 8000776:	035a      	lsls	r2, r3, #13
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	4313      	orrs	r3, r2
 800077c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	e00b      	b.n	800079c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000788:	f043 0220 	orr.w	r2, r3, #32
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000794:	f043 0201 	orr.w	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <HAL_ADC_Init+0x1a8>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	6812      	ldr	r2, [r2, #0]
 80007be:	68b9      	ldr	r1, [r7, #8]
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007cc:	d003      	beq.n	80007d6 <HAL_ADC_Init+0x126>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d104      	bne.n	80007e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	3b01      	subs	r3, #1
 80007dc:	051b      	lsls	r3, r3, #20
 80007de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	430a      	orrs	r2, r1
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <HAL_ADC_Init+0x1ac>)
 80007fc:	4013      	ands	r3, r2
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	429a      	cmp	r2, r3
 8000802:	d10b      	bne.n	800081c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080e:	f023 0303 	bic.w	r3, r3, #3
 8000812:	f043 0201 	orr.w	r2, r3, #1
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800081a:	e018      	b.n	800084e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000820:	f023 0312 	bic.w	r3, r3, #18
 8000824:	f043 0210 	orr.w	r2, r3, #16
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000830:	f043 0201 	orr.w	r2, r3, #1
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800083c:	e007      	b.n	800084e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000842:	f043 0210 	orr.w	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800084e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	ffe1f7fd 	.word	0xffe1f7fd
 800085c:	ff1f0efe 	.word	0xff1f0efe

08000860 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000872:	2b01      	cmp	r3, #1
 8000874:	d101      	bne.n	800087a <HAL_ADC_Start+0x1a>
 8000876:	2302      	movs	r3, #2
 8000878:	e098      	b.n	80009ac <HAL_ADC_Start+0x14c>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2201      	movs	r2, #1
 800087e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 faa4 	bl	8000dd0 <ADC_Enable>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8087 	bne.w	80009a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800089c:	f023 0301 	bic.w	r3, r3, #1
 80008a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <HAL_ADC_Start+0x154>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d105      	bne.n	80008be <HAL_ADC_Start+0x5e>
 80008b2:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <HAL_ADC_Start+0x158>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d115      	bne.n	80008ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d026      	beq.n	8000926 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008e8:	e01d      	b.n	8000926 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <HAL_ADC_Start+0x158>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d004      	beq.n	800090a <HAL_ADC_Start+0xaa>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <HAL_ADC_Start+0x154>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d10d      	bne.n	8000926 <HAL_ADC_Start+0xc6>
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <HAL_ADC_Start+0x158>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800091e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d006      	beq.n	8000940 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	f023 0206 	bic.w	r2, r3, #6
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
 800093e:	e002      	b.n	8000946 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f06f 0202 	mvn.w	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000962:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000966:	d113      	bne.n	8000990 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_ADC_Start+0x154>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d105      	bne.n	800097e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_ADC_Start+0x158>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800097a:	2b00      	cmp	r3, #0
 800097c:	d108      	bne.n	8000990 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	e00c      	b.n	80009aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	e003      	b.n	80009aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40012800 	.word	0x40012800
 80009b8:	40012400 	.word	0x40012400

080009bc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80009d2:	f7ff fe63 	bl	800069c <HAL_GetTick>
 80009d6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00b      	beq.n	80009fe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ea:	f043 0220 	orr.w	r2, r3, #32
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e0d3      	b.n	8000ba6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d131      	bne.n	8000a70 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d12a      	bne.n	8000a70 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a1a:	e021      	b.n	8000a60 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a22:	d01d      	beq.n	8000a60 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d007      	beq.n	8000a3a <HAL_ADC_PollForConversion+0x7e>
 8000a2a:	f7ff fe37 	bl	800069c <HAL_GetTick>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d212      	bcs.n	8000a60 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10b      	bne.n	8000a60 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4c:	f043 0204 	orr.w	r2, r3, #4
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e0a2      	b.n	8000ba6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0d6      	beq.n	8000a1c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a6e:	e070      	b.n	8000b52 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a70:	4b4f      	ldr	r3, [pc, #316]	; (8000bb0 <HAL_ADC_PollForConversion+0x1f4>)
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	2002      	movs	r0, #2
 8000a76:	f001 f96d 	bl	8001d54 <HAL_RCCEx_GetPeriphCLKFreq>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6919      	ldr	r1, [r3, #16]
 8000a86:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <HAL_ADC_PollForConversion+0x1f8>)
 8000a88:	400b      	ands	r3, r1
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d118      	bne.n	8000ac0 <HAL_ADC_PollForConversion+0x104>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68d9      	ldr	r1, [r3, #12]
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_ADC_PollForConversion+0x1fc>)
 8000a96:	400b      	ands	r3, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d111      	bne.n	8000ac0 <HAL_ADC_PollForConversion+0x104>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6919      	ldr	r1, [r3, #16]
 8000aa2:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <HAL_ADC_PollForConversion+0x200>)
 8000aa4:	400b      	ands	r3, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d108      	bne.n	8000abc <HAL_ADC_PollForConversion+0x100>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68d9      	ldr	r1, [r3, #12]
 8000ab0:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <HAL_ADC_PollForConversion+0x204>)
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <HAL_ADC_PollForConversion+0x100>
 8000ab8:	2314      	movs	r3, #20
 8000aba:	e020      	b.n	8000afe <HAL_ADC_PollForConversion+0x142>
 8000abc:	2329      	movs	r3, #41	; 0x29
 8000abe:	e01e      	b.n	8000afe <HAL_ADC_PollForConversion+0x142>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6919      	ldr	r1, [r3, #16]
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <HAL_ADC_PollForConversion+0x200>)
 8000ac8:	400b      	ands	r3, r1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d106      	bne.n	8000adc <HAL_ADC_PollForConversion+0x120>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68d9      	ldr	r1, [r3, #12]
 8000ad4:	4b3a      	ldr	r3, [pc, #232]	; (8000bc0 <HAL_ADC_PollForConversion+0x204>)
 8000ad6:	400b      	ands	r3, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00d      	beq.n	8000af8 <HAL_ADC_PollForConversion+0x13c>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6919      	ldr	r1, [r3, #16]
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <HAL_ADC_PollForConversion+0x208>)
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d108      	bne.n	8000afc <HAL_ADC_PollForConversion+0x140>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68d9      	ldr	r1, [r3, #12]
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <HAL_ADC_PollForConversion+0x208>)
 8000af2:	400b      	ands	r3, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <HAL_ADC_PollForConversion+0x140>
 8000af8:	2354      	movs	r3, #84	; 0x54
 8000afa:	e000      	b.n	8000afe <HAL_ADC_PollForConversion+0x142>
 8000afc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b04:	e021      	b.n	8000b4a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d01a      	beq.n	8000b44 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d007      	beq.n	8000b24 <HAL_ADC_PollForConversion+0x168>
 8000b14:	f7ff fdc2 	bl	800069c <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d20f      	bcs.n	8000b44 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d90b      	bls.n	8000b44 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	f043 0204 	orr.w	r2, r3, #4
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000b40:	2303      	movs	r3, #3
 8000b42:	e030      	b.n	8000ba6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d8d9      	bhi.n	8000b06 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f06f 0212 	mvn.w	r2, #18
 8000b5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b76:	d115      	bne.n	8000ba4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d111      	bne.n	8000ba4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f043 0201 	orr.w	r2, r3, #1
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	371c      	adds	r7, #28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	24924924 	.word	0x24924924
 8000bb8:	00924924 	.word	0x00924924
 8000bbc:	12492492 	.word	0x12492492
 8000bc0:	00492492 	.word	0x00492492
 8000bc4:	00249249 	.word	0x00249249

08000bc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <HAL_ADC_ConfigChannel+0x20>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e0dc      	b.n	8000dba <HAL_ADC_ConfigChannel+0x1da>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b06      	cmp	r3, #6
 8000c0e:	d81c      	bhi.n	8000c4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	3b05      	subs	r3, #5
 8000c22:	221f      	movs	r2, #31
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	4019      	ands	r1, r3
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	3b05      	subs	r3, #5
 8000c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34
 8000c48:	e03c      	b.n	8000cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b0c      	cmp	r3, #12
 8000c50:	d81c      	bhi.n	8000c8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	3b23      	subs	r3, #35	; 0x23
 8000c64:	221f      	movs	r2, #31
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4019      	ands	r1, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3b23      	subs	r3, #35	; 0x23
 8000c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
 8000c8a:	e01b      	b.n	8000cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3b41      	subs	r3, #65	; 0x41
 8000c9e:	221f      	movs	r2, #31
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4019      	ands	r1, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b41      	subs	r3, #65	; 0x41
 8000cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	d91c      	bls.n	8000d06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68d9      	ldr	r1, [r3, #12]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	3b1e      	subs	r3, #30
 8000cde:	2207      	movs	r2, #7
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4019      	ands	r1, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	6898      	ldr	r0, [r3, #8]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3b1e      	subs	r3, #30
 8000cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	e019      	b.n	8000d3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6919      	ldr	r1, [r3, #16]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	2207      	movs	r2, #7
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4019      	ands	r1, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	6898      	ldr	r0, [r3, #8]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b10      	cmp	r3, #16
 8000d40:	d003      	beq.n	8000d4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d46:	2b11      	cmp	r3, #17
 8000d48:	d132      	bne.n	8000db0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d125      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d126      	bne.n	8000db0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b10      	cmp	r3, #16
 8000d78:	d11a      	bne.n	8000db0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <HAL_ADC_ConfigChannel+0x1ec>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	0c9a      	lsrs	r2, r3, #18
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f9      	bne.n	8000d92 <HAL_ADC_ConfigChannel+0x1b2>
 8000d9e:	e007      	b.n	8000db0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f043 0220 	orr.w	r2, r3, #32
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40012400 	.word	0x40012400
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	431bde83 	.word	0x431bde83

08000dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d040      	beq.n	8000e70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0201 	orr.w	r2, r2, #1
 8000dfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <ADC_Enable+0xac>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <ADC_Enable+0xb0>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0c9b      	lsrs	r3, r3, #18
 8000e0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e0c:	e002      	b.n	8000e14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f9      	bne.n	8000e0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e1a:	f7ff fc3f 	bl	800069c <HAL_GetTick>
 8000e1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e20:	e01f      	b.n	8000e62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e22:	f7ff fc3b 	bl	800069c <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d918      	bls.n	8000e62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d011      	beq.n	8000e62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f043 0210 	orr.w	r2, r3, #16
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e007      	b.n	8000e72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d1d8      	bne.n	8000e22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d12e      	bne.n	8000efc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0201 	bic.w	r2, r2, #1
 8000eac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eae:	f7ff fbf5 	bl	800069c <HAL_GetTick>
 8000eb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eb4:	e01b      	b.n	8000eee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eb6:	f7ff fbf1 	bl	800069c <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d914      	bls.n	8000eee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d10d      	bne.n	8000eee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	f043 0210 	orr.w	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e007      	b.n	8000efe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d0dc      	beq.n	8000eb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff90 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff49 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff5e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff90 	bl	8000fc0 <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5f 	bl	8000f6c <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb0 	bl	8001024 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b08b      	sub	sp, #44	; 0x2c
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	e161      	b.n	80013a8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e4:	2201      	movs	r2, #1
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8150 	bne.w	80013a2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4a97      	ldr	r2, [pc, #604]	; (8001364 <HAL_GPIO_Init+0x294>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d05e      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 800110c:	4a95      	ldr	r2, [pc, #596]	; (8001364 <HAL_GPIO_Init+0x294>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d875      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001112:	4a95      	ldr	r2, [pc, #596]	; (8001368 <HAL_GPIO_Init+0x298>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d058      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001118:	4a93      	ldr	r2, [pc, #588]	; (8001368 <HAL_GPIO_Init+0x298>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d86f      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800111e:	4a93      	ldr	r2, [pc, #588]	; (800136c <HAL_GPIO_Init+0x29c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d052      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001124:	4a91      	ldr	r2, [pc, #580]	; (800136c <HAL_GPIO_Init+0x29c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d869      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800112a:	4a91      	ldr	r2, [pc, #580]	; (8001370 <HAL_GPIO_Init+0x2a0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d04c      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001130:	4a8f      	ldr	r2, [pc, #572]	; (8001370 <HAL_GPIO_Init+0x2a0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d863      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001136:	4a8f      	ldr	r2, [pc, #572]	; (8001374 <HAL_GPIO_Init+0x2a4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d046      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 800113c:	4a8d      	ldr	r2, [pc, #564]	; (8001374 <HAL_GPIO_Init+0x2a4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d85d      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001142:	2b12      	cmp	r3, #18
 8001144:	d82a      	bhi.n	800119c <HAL_GPIO_Init+0xcc>
 8001146:	2b12      	cmp	r3, #18
 8001148:	d859      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <HAL_GPIO_Init+0x80>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	080011cb 	.word	0x080011cb
 8001154:	080011a5 	.word	0x080011a5
 8001158:	080011b7 	.word	0x080011b7
 800115c:	080011f9 	.word	0x080011f9
 8001160:	080011ff 	.word	0x080011ff
 8001164:	080011ff 	.word	0x080011ff
 8001168:	080011ff 	.word	0x080011ff
 800116c:	080011ff 	.word	0x080011ff
 8001170:	080011ff 	.word	0x080011ff
 8001174:	080011ff 	.word	0x080011ff
 8001178:	080011ff 	.word	0x080011ff
 800117c:	080011ff 	.word	0x080011ff
 8001180:	080011ff 	.word	0x080011ff
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011ff 	.word	0x080011ff
 800118c:	080011ff 	.word	0x080011ff
 8001190:	080011ff 	.word	0x080011ff
 8001194:	080011ad 	.word	0x080011ad
 8001198:	080011c1 	.word	0x080011c1
 800119c:	4a76      	ldr	r2, [pc, #472]	; (8001378 <HAL_GPIO_Init+0x2a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011a2:	e02c      	b.n	80011fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e029      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	3304      	adds	r3, #4
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e024      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	3308      	adds	r3, #8
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e01f      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	330c      	adds	r3, #12
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e01a      	b.n	8001200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011d2:	2304      	movs	r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e013      	b.n	8001200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e0:	2308      	movs	r3, #8
 80011e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	611a      	str	r2, [r3, #16]
          break;
 80011ea:	e009      	b.n	8001200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ec:	2308      	movs	r3, #8
 80011ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	615a      	str	r2, [r3, #20]
          break;
 80011f6:	e003      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x130>
          break;
 80011fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2bff      	cmp	r3, #255	; 0xff
 8001204:	d801      	bhi.n	800120a <HAL_GPIO_Init+0x13a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	e001      	b.n	800120e <HAL_GPIO_Init+0x13e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d802      	bhi.n	800121c <HAL_GPIO_Init+0x14c>
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x152>
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	3b08      	subs	r3, #8
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	210f      	movs	r1, #15
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	6a39      	ldr	r1, [r7, #32]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80a9 	beq.w	80013a2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001250:	4b4a      	ldr	r3, [pc, #296]	; (800137c <HAL_GPIO_Init+0x2ac>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a49      	ldr	r2, [pc, #292]	; (800137c <HAL_GPIO_Init+0x2ac>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_GPIO_Init+0x2ac>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001268:	4a45      	ldr	r2, [pc, #276]	; (8001380 <HAL_GPIO_Init+0x2b0>)
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <HAL_GPIO_Init+0x2b4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d00d      	beq.n	80012b0 <HAL_GPIO_Init+0x1e0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3c      	ldr	r2, [pc, #240]	; (8001388 <HAL_GPIO_Init+0x2b8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x1dc>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3b      	ldr	r2, [pc, #236]	; (800138c <HAL_GPIO_Init+0x2bc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_GPIO_Init+0x1d8>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1e2>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1e2>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1e2>
 80012b0:	2300      	movs	r3, #0
 80012b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012c2:	492f      	ldr	r1, [pc, #188]	; (8001380 <HAL_GPIO_Init+0x2b0>)
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012dc:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	492b      	ldr	r1, [pc, #172]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4927      	ldr	r1, [pc, #156]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4921      	ldr	r1, [pc, #132]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	60cb      	str	r3, [r1, #12]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	491d      	ldr	r1, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 800131c:	4013      	ands	r3, r2
 800131e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4917      	ldr	r1, [pc, #92]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	43db      	mvns	r3, r3
 8001342:	4913      	ldr	r1, [pc, #76]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 8001344:	4013      	ands	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01f      	beq.n	8001394 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	490d      	ldr	r1, [pc, #52]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
 8001360:	e01f      	b.n	80013a2 <HAL_GPIO_Init+0x2d2>
 8001362:	bf00      	nop
 8001364:	10320000 	.word	0x10320000
 8001368:	10310000 	.word	0x10310000
 800136c:	10220000 	.word	0x10220000
 8001370:	10210000 	.word	0x10210000
 8001374:	10120000 	.word	0x10120000
 8001378:	10110000 	.word	0x10110000
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000
 8001384:	40010800 	.word	0x40010800
 8001388:	40010c00 	.word	0x40010c00
 800138c:	40011000 	.word	0x40011000
 8001390:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_GPIO_Init+0x2f4>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43db      	mvns	r3, r3
 800139c:	4909      	ldr	r1, [pc, #36]	; (80013c4 <HAL_GPIO_Init+0x2f4>)
 800139e:	4013      	ands	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	3301      	adds	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f ae96 	bne.w	80010e4 <HAL_GPIO_Init+0x14>
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	372c      	adds	r7, #44	; 0x2c
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40010400 	.word	0x40010400

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e272      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8087 	beq.w	80014f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d00c      	beq.n	800140e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f4:	4b8f      	ldr	r3, [pc, #572]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d112      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
 8001400:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d10b      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x12c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d168      	bne.n	80014f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e24c      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x76>
 8001430:	4b80      	ldr	r3, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a7f      	ldr	r2, [pc, #508]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e02e      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x98>
 8001446:	4b7b      	ldr	r3, [pc, #492]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7a      	ldr	r2, [pc, #488]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b78      	ldr	r3, [pc, #480]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a77      	ldr	r2, [pc, #476]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0xbc>
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a71      	ldr	r2, [pc, #452]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6a      	ldr	r2, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a67      	ldr	r2, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff f8fa 	bl	800069c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff f8f6 	bl	800069c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e200      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xe4>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff f8e6 	bl	800069c <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff f8e2 	bl	800069c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1ec      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x10c>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001502:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1c0      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4939      	ldr	r1, [pc, #228]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e03a      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f89b 	bl	800069c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff f897 	bl	800069c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1a1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4927      	ldr	r1, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff f87a 	bl	800069c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff f876 	bl	800069c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e180      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03a      	beq.n	800164c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d019      	beq.n	8001612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_RCC_OscConfig+0x274>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff f85a 	bl	800069c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff f856 	bl	800069c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e160      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f000 face 	bl	8001bac <RCC_Delay>
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_RCC_OscConfig+0x274>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff f840 	bl	800069c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161e:	e00f      	b.n	8001640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff f83c 	bl	800069c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d908      	bls.n	8001640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e146      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	42420000 	.word	0x42420000
 800163c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b92      	ldr	r3, [pc, #584]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e9      	bne.n	8001620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a6 	beq.w	80017a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b8b      	ldr	r3, [pc, #556]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10d      	bne.n	8001686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a87      	ldr	r2, [pc, #540]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b82      	ldr	r3, [pc, #520]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7e      	ldr	r2, [pc, #504]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7fe fffd 	bl	800069c <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a6:	f7fe fff9 	bl	800069c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e103      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b75      	ldr	r3, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x312>
 80016cc:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	e02d      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x334>
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a66      	ldr	r2, [pc, #408]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	e01c      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x356>
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a60      	ldr	r2, [pc, #384]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a5d      	ldr	r2, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 800171e:	4b5b      	ldr	r3, [pc, #364]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a5a      	ldr	r2, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d015      	beq.n	800176a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7fe ffad 	bl	800069c <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7fe ffa9 	bl	800069c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0b1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ee      	beq.n	8001746 <HAL_RCC_OscConfig+0x37e>
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7fe ff97 	bl	800069c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7fe ff93 	bl	800069c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e09b      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d105      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d061      	beq.n	8001880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d146      	bne.n	8001852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7fe ff67 	bl	800069c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d2:	f7fe ff63 	bl	800069c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e06d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d108      	bne.n	800180c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4921      	ldr	r1, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a19      	ldr	r1, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	430b      	orrs	r3, r1
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7fe ff37 	bl	800069c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7fe ff33 	bl	800069c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x46a>
 8001850:	e035      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7fe ff20 	bl	800069c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7fe ff1c 	bl	800069c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e026      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x498>
 800187e:	e01e      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e019      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 800188c:	40021000 	.word	0x40021000
 8001890:	40007000 	.word	0x40007000
 8001894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x500>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4965      	ldr	r1, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800194a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7fe fe6e 	bl	800069c <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7fe fe6a 	bl	800069c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1cc>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fdcc 	bl	8000618 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08002bd8 	.word	0x08002bd8
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8001ace:	e027      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ad2:	613b      	str	r3, [r7, #16]
      break;
 8001ad4:	e027      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	0c9b      	lsrs	r3, r3, #18
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0c5b      	lsrs	r3, r3, #17
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b02:	fb03 f202 	mul.w	r2, r3, r2
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e004      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	613b      	str	r3, [r7, #16]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b22:	613b      	str	r3, [r7, #16]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	693b      	ldr	r3, [r7, #16]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	007a1200 	.word	0x007a1200
 8001b3c:	08002bf0 	.word	0x08002bf0
 8001b40:	08002c00 	.word	0x08002c00
 8001b44:	003d0900 	.word	0x003d0900

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff2 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08002be8 	.word	0x08002be8

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0adb      	lsrs	r3, r3, #11
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08002be8 	.word	0x08002be8

08001bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <RCC_Delay+0x34>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <RCC_Delay+0x38>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0a5b      	lsrs	r3, r3, #9
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc8:	bf00      	nop
  }
  while (Delay --);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	60fa      	str	r2, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f9      	bne.n	8001bc8 <RCC_Delay+0x1c>
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000
 8001be4:	10624dd3 	.word	0x10624dd3

08001be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d07d      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c08:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	61d3      	str	r3, [r2, #28]
 8001c20:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c48:	f7fe fd28 	bl	800069c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	e008      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7fe fd24 	bl	800069c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e06d      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02e      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d027      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d014      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe fcf3 	bl	800069c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe fcef 	bl	800069c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e036      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4917      	ldr	r1, [pc, #92]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	490b      	ldr	r1, [pc, #44]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4904      	ldr	r1, [pc, #16]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420440 	.word	0x42420440

08001d54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d00a      	beq.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	f200 808a 	bhi.w	8001e92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d045      	beq.n	8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d075      	beq.n	8001e76 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d8a:	e082      	b.n	8001e92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001d8c:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001d92:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07b      	beq.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a41      	ldr	r2, [pc, #260]	; (8001eac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0c5b      	lsrs	r3, r3, #17
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001dd0:	4a38      	ldr	r2, [pc, #224]	; (8001eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	e004      	b.n	8001dec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df8:	d102      	bne.n	8001e00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	61bb      	str	r3, [r7, #24]
      break;
 8001dfe:	e04a      	b.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
      break;
 8001e0e:	e042      	b.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e20:	d108      	bne.n	8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e01f      	b.n	8001e74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3e:	d109      	bne.n	8001e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001e4c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e00f      	b.n	8001e74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e5e:	d11c      	bne.n	8001e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d016      	beq.n	8001e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001e6c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001e70:	61bb      	str	r3, [r7, #24]
      break;
 8001e72:	e012      	b.n	8001e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001e74:	e011      	b.n	8001e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001e76:	f7ff fe85 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0b9b      	lsrs	r3, r3, #14
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	61bb      	str	r3, [r7, #24]
      break;
 8001e90:	e004      	b.n	8001e9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001e92:	bf00      	nop
 8001e94:	e002      	b.n	8001e9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001e96:	bf00      	nop
 8001e98:	e000      	b.n	8001e9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001e9a:	bf00      	nop
    }
  }
  return (frequency);
 8001e9c:	69bb      	ldr	r3, [r7, #24]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08002c04 	.word	0x08002c04
 8001eb0:	08002c14 	.word	0x08002c14
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	003d0900 	.word	0x003d0900
 8001ebc:	aaaaaaab 	.word	0xaaaaaaab

08001ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e042      	b.n	8001f58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe faaa 	bl	8000440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f91d 	bl	8002144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d16d      	bne.n	800205c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_UART_Transmit+0x2c>
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e066      	b.n	800205e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2221      	movs	r2, #33	; 0x21
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f9e:	f7fe fb7d 	bl	800069c <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	88fa      	ldrh	r2, [r7, #6]
 8001fae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb8:	d108      	bne.n	8001fcc <HAL_UART_Transmit+0x6c>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d104      	bne.n	8001fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	e003      	b.n	8001fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fd4:	e02a      	b.n	800202c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f840 	bl	8002066 <UART_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e036      	b.n	800205e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e007      	b.n	800201e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1cf      	bne.n	8001fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f810 	bl	8002066 <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e006      	b.n	800205e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b090      	sub	sp, #64	; 0x40
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002076:	e050      	b.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d04c      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x30>
 8002086:	f7fe fb09 	bl	800069c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002092:	429a      	cmp	r2, r3
 8002094:	d241      	bcs.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b6:	637a      	str	r2, [r7, #52]	; 0x34
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020be:	e841 2300 	strex	r3, r2, [r1]
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e5      	bne.n	8002096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3314      	adds	r3, #20
 80020d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	e853 3f00 	ldrex	r3, [r3]
 80020d8:	613b      	str	r3, [r7, #16]
   return(result);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3314      	adds	r3, #20
 80020e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ea:	623a      	str	r2, [r7, #32]
 80020ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	69f9      	ldr	r1, [r7, #28]
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	e841 2300 	strex	r3, r2, [r1]
 80020f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e5      	bne.n	80020ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e00f      	b.n	800213a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	429a      	cmp	r2, r3
 8002136:	d09f      	beq.n	8002078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3740      	adds	r7, #64	; 0x40
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800217e:	f023 030c 	bic.w	r3, r3, #12
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	430b      	orrs	r3, r1
 800218a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <UART_SetConfig+0x114>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d103      	bne.n	80021b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021ac:	f7ff fcea 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	e002      	b.n	80021ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021b4:	f7ff fcd2 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 80021b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <UART_SetConfig+0x118>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	0119      	lsls	r1, r3, #4
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009a      	lsls	r2, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <UART_SetConfig+0x118>)
 80021f2:	fba3 0302 	umull	r0, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2064      	movs	r0, #100	; 0x64
 80021fa:	fb00 f303 	mul.w	r3, r0, r3
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	3332      	adds	r3, #50	; 0x32
 8002204:	4a15      	ldr	r2, [pc, #84]	; (800225c <UART_SetConfig+0x118>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	4419      	add	r1, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	009a      	lsls	r2, r3, #2
 800221c:	441a      	add	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fbb2 f2f3 	udiv	r2, r2, r3
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <UART_SetConfig+0x118>)
 800222a:	fba3 0302 	umull	r0, r3, r3, r2
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2064      	movs	r0, #100	; 0x64
 8002232:	fb00 f303 	mul.w	r3, r0, r3
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	3332      	adds	r3, #50	; 0x32
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <UART_SetConfig+0x118>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	440a      	add	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40013800 	.word	0x40013800
 800225c:	51eb851f 	.word	0x51eb851f

08002260 <__errno>:
 8002260:	4b01      	ldr	r3, [pc, #4]	; (8002268 <__errno+0x8>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2000000c 	.word	0x2000000c

0800226c <__libc_init_array>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	2600      	movs	r6, #0
 8002270:	4d0c      	ldr	r5, [pc, #48]	; (80022a4 <__libc_init_array+0x38>)
 8002272:	4c0d      	ldr	r4, [pc, #52]	; (80022a8 <__libc_init_array+0x3c>)
 8002274:	1b64      	subs	r4, r4, r5
 8002276:	10a4      	asrs	r4, r4, #2
 8002278:	42a6      	cmp	r6, r4
 800227a:	d109      	bne.n	8002290 <__libc_init_array+0x24>
 800227c:	f000 fc9c 	bl	8002bb8 <_init>
 8002280:	2600      	movs	r6, #0
 8002282:	4d0a      	ldr	r5, [pc, #40]	; (80022ac <__libc_init_array+0x40>)
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <__libc_init_array+0x44>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	42a6      	cmp	r6, r4
 800228c:	d105      	bne.n	800229a <__libc_init_array+0x2e>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	f855 3b04 	ldr.w	r3, [r5], #4
 8002294:	4798      	blx	r3
 8002296:	3601      	adds	r6, #1
 8002298:	e7ee      	b.n	8002278 <__libc_init_array+0xc>
 800229a:	f855 3b04 	ldr.w	r3, [r5], #4
 800229e:	4798      	blx	r3
 80022a0:	3601      	adds	r6, #1
 80022a2:	e7f2      	b.n	800228a <__libc_init_array+0x1e>
 80022a4:	08002c4c 	.word	0x08002c4c
 80022a8:	08002c4c 	.word	0x08002c4c
 80022ac:	08002c4c 	.word	0x08002c4c
 80022b0:	08002c50 	.word	0x08002c50

080022b4 <memset>:
 80022b4:	4603      	mov	r3, r0
 80022b6:	4402      	add	r2, r0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <memset+0xa>
 80022bc:	4770      	bx	lr
 80022be:	f803 1b01 	strb.w	r1, [r3], #1
 80022c2:	e7f9      	b.n	80022b8 <memset+0x4>

080022c4 <siprintf>:
 80022c4:	b40e      	push	{r1, r2, r3}
 80022c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022ca:	b500      	push	{lr}
 80022cc:	b09c      	sub	sp, #112	; 0x70
 80022ce:	ab1d      	add	r3, sp, #116	; 0x74
 80022d0:	9002      	str	r0, [sp, #8]
 80022d2:	9006      	str	r0, [sp, #24]
 80022d4:	9107      	str	r1, [sp, #28]
 80022d6:	9104      	str	r1, [sp, #16]
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <siprintf+0x38>)
 80022da:	4909      	ldr	r1, [pc, #36]	; (8002300 <siprintf+0x3c>)
 80022dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80022e0:	9105      	str	r1, [sp, #20]
 80022e2:	6800      	ldr	r0, [r0, #0]
 80022e4:	a902      	add	r1, sp, #8
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	f000 f868 	bl	80023bc <_svfiprintf_r>
 80022ec:	2200      	movs	r2, #0
 80022ee:	9b02      	ldr	r3, [sp, #8]
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	b01c      	add	sp, #112	; 0x70
 80022f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80022f8:	b003      	add	sp, #12
 80022fa:	4770      	bx	lr
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	ffff0208 	.word	0xffff0208

08002304 <__ssputs_r>:
 8002304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002308:	688e      	ldr	r6, [r1, #8]
 800230a:	4682      	mov	sl, r0
 800230c:	429e      	cmp	r6, r3
 800230e:	460c      	mov	r4, r1
 8002310:	4690      	mov	r8, r2
 8002312:	461f      	mov	r7, r3
 8002314:	d838      	bhi.n	8002388 <__ssputs_r+0x84>
 8002316:	898a      	ldrh	r2, [r1, #12]
 8002318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800231c:	d032      	beq.n	8002384 <__ssputs_r+0x80>
 800231e:	6825      	ldr	r5, [r4, #0]
 8002320:	6909      	ldr	r1, [r1, #16]
 8002322:	3301      	adds	r3, #1
 8002324:	eba5 0901 	sub.w	r9, r5, r1
 8002328:	6965      	ldr	r5, [r4, #20]
 800232a:	444b      	add	r3, r9
 800232c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002334:	106d      	asrs	r5, r5, #1
 8002336:	429d      	cmp	r5, r3
 8002338:	bf38      	it	cc
 800233a:	461d      	movcc	r5, r3
 800233c:	0553      	lsls	r3, r2, #21
 800233e:	d531      	bpl.n	80023a4 <__ssputs_r+0xa0>
 8002340:	4629      	mov	r1, r5
 8002342:	f000 fb6f 	bl	8002a24 <_malloc_r>
 8002346:	4606      	mov	r6, r0
 8002348:	b950      	cbnz	r0, 8002360 <__ssputs_r+0x5c>
 800234a:	230c      	movs	r3, #12
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f8ca 3000 	str.w	r3, [sl]
 8002354:	89a3      	ldrh	r3, [r4, #12]
 8002356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800235a:	81a3      	strh	r3, [r4, #12]
 800235c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002360:	464a      	mov	r2, r9
 8002362:	6921      	ldr	r1, [r4, #16]
 8002364:	f000 face 	bl	8002904 <memcpy>
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	81a3      	strh	r3, [r4, #12]
 8002374:	6126      	str	r6, [r4, #16]
 8002376:	444e      	add	r6, r9
 8002378:	6026      	str	r6, [r4, #0]
 800237a:	463e      	mov	r6, r7
 800237c:	6165      	str	r5, [r4, #20]
 800237e:	eba5 0509 	sub.w	r5, r5, r9
 8002382:	60a5      	str	r5, [r4, #8]
 8002384:	42be      	cmp	r6, r7
 8002386:	d900      	bls.n	800238a <__ssputs_r+0x86>
 8002388:	463e      	mov	r6, r7
 800238a:	4632      	mov	r2, r6
 800238c:	4641      	mov	r1, r8
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	f000 fac6 	bl	8002920 <memmove>
 8002394:	68a3      	ldr	r3, [r4, #8]
 8002396:	2000      	movs	r0, #0
 8002398:	1b9b      	subs	r3, r3, r6
 800239a:	60a3      	str	r3, [r4, #8]
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	4433      	add	r3, r6
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	e7db      	b.n	800235c <__ssputs_r+0x58>
 80023a4:	462a      	mov	r2, r5
 80023a6:	f000 fbb1 	bl	8002b0c <_realloc_r>
 80023aa:	4606      	mov	r6, r0
 80023ac:	2800      	cmp	r0, #0
 80023ae:	d1e1      	bne.n	8002374 <__ssputs_r+0x70>
 80023b0:	4650      	mov	r0, sl
 80023b2:	6921      	ldr	r1, [r4, #16]
 80023b4:	f000 face 	bl	8002954 <_free_r>
 80023b8:	e7c7      	b.n	800234a <__ssputs_r+0x46>
	...

080023bc <_svfiprintf_r>:
 80023bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c0:	4698      	mov	r8, r3
 80023c2:	898b      	ldrh	r3, [r1, #12]
 80023c4:	4607      	mov	r7, r0
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	460d      	mov	r5, r1
 80023ca:	4614      	mov	r4, r2
 80023cc:	b09d      	sub	sp, #116	; 0x74
 80023ce:	d50e      	bpl.n	80023ee <_svfiprintf_r+0x32>
 80023d0:	690b      	ldr	r3, [r1, #16]
 80023d2:	b963      	cbnz	r3, 80023ee <_svfiprintf_r+0x32>
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	f000 fb25 	bl	8002a24 <_malloc_r>
 80023da:	6028      	str	r0, [r5, #0]
 80023dc:	6128      	str	r0, [r5, #16]
 80023de:	b920      	cbnz	r0, 80023ea <_svfiprintf_r+0x2e>
 80023e0:	230c      	movs	r3, #12
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	e0d1      	b.n	800258e <_svfiprintf_r+0x1d2>
 80023ea:	2340      	movs	r3, #64	; 0x40
 80023ec:	616b      	str	r3, [r5, #20]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9309      	str	r3, [sp, #36]	; 0x24
 80023f2:	2320      	movs	r3, #32
 80023f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023f8:	2330      	movs	r3, #48	; 0x30
 80023fa:	f04f 0901 	mov.w	r9, #1
 80023fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002402:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80025a8 <_svfiprintf_r+0x1ec>
 8002406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800240a:	4623      	mov	r3, r4
 800240c:	469a      	mov	sl, r3
 800240e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002412:	b10a      	cbz	r2, 8002418 <_svfiprintf_r+0x5c>
 8002414:	2a25      	cmp	r2, #37	; 0x25
 8002416:	d1f9      	bne.n	800240c <_svfiprintf_r+0x50>
 8002418:	ebba 0b04 	subs.w	fp, sl, r4
 800241c:	d00b      	beq.n	8002436 <_svfiprintf_r+0x7a>
 800241e:	465b      	mov	r3, fp
 8002420:	4622      	mov	r2, r4
 8002422:	4629      	mov	r1, r5
 8002424:	4638      	mov	r0, r7
 8002426:	f7ff ff6d 	bl	8002304 <__ssputs_r>
 800242a:	3001      	adds	r0, #1
 800242c:	f000 80aa 	beq.w	8002584 <_svfiprintf_r+0x1c8>
 8002430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002432:	445a      	add	r2, fp
 8002434:	9209      	str	r2, [sp, #36]	; 0x24
 8002436:	f89a 3000 	ldrb.w	r3, [sl]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80a2 	beq.w	8002584 <_svfiprintf_r+0x1c8>
 8002440:	2300      	movs	r3, #0
 8002442:	f04f 32ff 	mov.w	r2, #4294967295
 8002446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800244a:	f10a 0a01 	add.w	sl, sl, #1
 800244e:	9304      	str	r3, [sp, #16]
 8002450:	9307      	str	r3, [sp, #28]
 8002452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002456:	931a      	str	r3, [sp, #104]	; 0x68
 8002458:	4654      	mov	r4, sl
 800245a:	2205      	movs	r2, #5
 800245c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002460:	4851      	ldr	r0, [pc, #324]	; (80025a8 <_svfiprintf_r+0x1ec>)
 8002462:	f000 fa41 	bl	80028e8 <memchr>
 8002466:	9a04      	ldr	r2, [sp, #16]
 8002468:	b9d8      	cbnz	r0, 80024a2 <_svfiprintf_r+0xe6>
 800246a:	06d0      	lsls	r0, r2, #27
 800246c:	bf44      	itt	mi
 800246e:	2320      	movmi	r3, #32
 8002470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002474:	0711      	lsls	r1, r2, #28
 8002476:	bf44      	itt	mi
 8002478:	232b      	movmi	r3, #43	; 0x2b
 800247a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800247e:	f89a 3000 	ldrb.w	r3, [sl]
 8002482:	2b2a      	cmp	r3, #42	; 0x2a
 8002484:	d015      	beq.n	80024b2 <_svfiprintf_r+0xf6>
 8002486:	4654      	mov	r4, sl
 8002488:	2000      	movs	r0, #0
 800248a:	f04f 0c0a 	mov.w	ip, #10
 800248e:	9a07      	ldr	r2, [sp, #28]
 8002490:	4621      	mov	r1, r4
 8002492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002496:	3b30      	subs	r3, #48	; 0x30
 8002498:	2b09      	cmp	r3, #9
 800249a:	d94e      	bls.n	800253a <_svfiprintf_r+0x17e>
 800249c:	b1b0      	cbz	r0, 80024cc <_svfiprintf_r+0x110>
 800249e:	9207      	str	r2, [sp, #28]
 80024a0:	e014      	b.n	80024cc <_svfiprintf_r+0x110>
 80024a2:	eba0 0308 	sub.w	r3, r0, r8
 80024a6:	fa09 f303 	lsl.w	r3, r9, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	46a2      	mov	sl, r4
 80024ae:	9304      	str	r3, [sp, #16]
 80024b0:	e7d2      	b.n	8002458 <_svfiprintf_r+0x9c>
 80024b2:	9b03      	ldr	r3, [sp, #12]
 80024b4:	1d19      	adds	r1, r3, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	9103      	str	r1, [sp, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bfbb      	ittet	lt
 80024be:	425b      	neglt	r3, r3
 80024c0:	f042 0202 	orrlt.w	r2, r2, #2
 80024c4:	9307      	strge	r3, [sp, #28]
 80024c6:	9307      	strlt	r3, [sp, #28]
 80024c8:	bfb8      	it	lt
 80024ca:	9204      	strlt	r2, [sp, #16]
 80024cc:	7823      	ldrb	r3, [r4, #0]
 80024ce:	2b2e      	cmp	r3, #46	; 0x2e
 80024d0:	d10c      	bne.n	80024ec <_svfiprintf_r+0x130>
 80024d2:	7863      	ldrb	r3, [r4, #1]
 80024d4:	2b2a      	cmp	r3, #42	; 0x2a
 80024d6:	d135      	bne.n	8002544 <_svfiprintf_r+0x188>
 80024d8:	9b03      	ldr	r3, [sp, #12]
 80024da:	3402      	adds	r4, #2
 80024dc:	1d1a      	adds	r2, r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	9203      	str	r2, [sp, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bfb8      	it	lt
 80024e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80024ea:	9305      	str	r3, [sp, #20]
 80024ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80025ac <_svfiprintf_r+0x1f0>
 80024f0:	2203      	movs	r2, #3
 80024f2:	4650      	mov	r0, sl
 80024f4:	7821      	ldrb	r1, [r4, #0]
 80024f6:	f000 f9f7 	bl	80028e8 <memchr>
 80024fa:	b140      	cbz	r0, 800250e <_svfiprintf_r+0x152>
 80024fc:	2340      	movs	r3, #64	; 0x40
 80024fe:	eba0 000a 	sub.w	r0, r0, sl
 8002502:	fa03 f000 	lsl.w	r0, r3, r0
 8002506:	9b04      	ldr	r3, [sp, #16]
 8002508:	3401      	adds	r4, #1
 800250a:	4303      	orrs	r3, r0
 800250c:	9304      	str	r3, [sp, #16]
 800250e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002512:	2206      	movs	r2, #6
 8002514:	4826      	ldr	r0, [pc, #152]	; (80025b0 <_svfiprintf_r+0x1f4>)
 8002516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800251a:	f000 f9e5 	bl	80028e8 <memchr>
 800251e:	2800      	cmp	r0, #0
 8002520:	d038      	beq.n	8002594 <_svfiprintf_r+0x1d8>
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <_svfiprintf_r+0x1f8>)
 8002524:	bb1b      	cbnz	r3, 800256e <_svfiprintf_r+0x1b2>
 8002526:	9b03      	ldr	r3, [sp, #12]
 8002528:	3307      	adds	r3, #7
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	3308      	adds	r3, #8
 8002530:	9303      	str	r3, [sp, #12]
 8002532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002534:	4433      	add	r3, r6
 8002536:	9309      	str	r3, [sp, #36]	; 0x24
 8002538:	e767      	b.n	800240a <_svfiprintf_r+0x4e>
 800253a:	460c      	mov	r4, r1
 800253c:	2001      	movs	r0, #1
 800253e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002542:	e7a5      	b.n	8002490 <_svfiprintf_r+0xd4>
 8002544:	2300      	movs	r3, #0
 8002546:	f04f 0c0a 	mov.w	ip, #10
 800254a:	4619      	mov	r1, r3
 800254c:	3401      	adds	r4, #1
 800254e:	9305      	str	r3, [sp, #20]
 8002550:	4620      	mov	r0, r4
 8002552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002556:	3a30      	subs	r2, #48	; 0x30
 8002558:	2a09      	cmp	r2, #9
 800255a:	d903      	bls.n	8002564 <_svfiprintf_r+0x1a8>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0c5      	beq.n	80024ec <_svfiprintf_r+0x130>
 8002560:	9105      	str	r1, [sp, #20]
 8002562:	e7c3      	b.n	80024ec <_svfiprintf_r+0x130>
 8002564:	4604      	mov	r4, r0
 8002566:	2301      	movs	r3, #1
 8002568:	fb0c 2101 	mla	r1, ip, r1, r2
 800256c:	e7f0      	b.n	8002550 <_svfiprintf_r+0x194>
 800256e:	ab03      	add	r3, sp, #12
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	462a      	mov	r2, r5
 8002574:	4638      	mov	r0, r7
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_svfiprintf_r+0x1fc>)
 8002578:	a904      	add	r1, sp, #16
 800257a:	f3af 8000 	nop.w
 800257e:	1c42      	adds	r2, r0, #1
 8002580:	4606      	mov	r6, r0
 8002582:	d1d6      	bne.n	8002532 <_svfiprintf_r+0x176>
 8002584:	89ab      	ldrh	r3, [r5, #12]
 8002586:	065b      	lsls	r3, r3, #25
 8002588:	f53f af2c 	bmi.w	80023e4 <_svfiprintf_r+0x28>
 800258c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800258e:	b01d      	add	sp, #116	; 0x74
 8002590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002594:	ab03      	add	r3, sp, #12
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	462a      	mov	r2, r5
 800259a:	4638      	mov	r0, r7
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <_svfiprintf_r+0x1fc>)
 800259e:	a904      	add	r1, sp, #16
 80025a0:	f000 f87c 	bl	800269c <_printf_i>
 80025a4:	e7eb      	b.n	800257e <_svfiprintf_r+0x1c2>
 80025a6:	bf00      	nop
 80025a8:	08002c16 	.word	0x08002c16
 80025ac:	08002c1c 	.word	0x08002c1c
 80025b0:	08002c20 	.word	0x08002c20
 80025b4:	00000000 	.word	0x00000000
 80025b8:	08002305 	.word	0x08002305

080025bc <_printf_common>:
 80025bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c0:	4616      	mov	r6, r2
 80025c2:	4699      	mov	r9, r3
 80025c4:	688a      	ldr	r2, [r1, #8]
 80025c6:	690b      	ldr	r3, [r1, #16]
 80025c8:	4607      	mov	r7, r0
 80025ca:	4293      	cmp	r3, r2
 80025cc:	bfb8      	it	lt
 80025ce:	4613      	movlt	r3, r2
 80025d0:	6033      	str	r3, [r6, #0]
 80025d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025d6:	460c      	mov	r4, r1
 80025d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025dc:	b10a      	cbz	r2, 80025e2 <_printf_common+0x26>
 80025de:	3301      	adds	r3, #1
 80025e0:	6033      	str	r3, [r6, #0]
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	0699      	lsls	r1, r3, #26
 80025e6:	bf42      	ittt	mi
 80025e8:	6833      	ldrmi	r3, [r6, #0]
 80025ea:	3302      	addmi	r3, #2
 80025ec:	6033      	strmi	r3, [r6, #0]
 80025ee:	6825      	ldr	r5, [r4, #0]
 80025f0:	f015 0506 	ands.w	r5, r5, #6
 80025f4:	d106      	bne.n	8002604 <_printf_common+0x48>
 80025f6:	f104 0a19 	add.w	sl, r4, #25
 80025fa:	68e3      	ldr	r3, [r4, #12]
 80025fc:	6832      	ldr	r2, [r6, #0]
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	42ab      	cmp	r3, r5
 8002602:	dc28      	bgt.n	8002656 <_printf_common+0x9a>
 8002604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002608:	1e13      	subs	r3, r2, #0
 800260a:	6822      	ldr	r2, [r4, #0]
 800260c:	bf18      	it	ne
 800260e:	2301      	movne	r3, #1
 8002610:	0692      	lsls	r2, r2, #26
 8002612:	d42d      	bmi.n	8002670 <_printf_common+0xb4>
 8002614:	4649      	mov	r1, r9
 8002616:	4638      	mov	r0, r7
 8002618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800261c:	47c0      	blx	r8
 800261e:	3001      	adds	r0, #1
 8002620:	d020      	beq.n	8002664 <_printf_common+0xa8>
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	68e5      	ldr	r5, [r4, #12]
 8002626:	f003 0306 	and.w	r3, r3, #6
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf18      	it	ne
 800262e:	2500      	movne	r5, #0
 8002630:	6832      	ldr	r2, [r6, #0]
 8002632:	f04f 0600 	mov.w	r6, #0
 8002636:	68a3      	ldr	r3, [r4, #8]
 8002638:	bf08      	it	eq
 800263a:	1aad      	subeq	r5, r5, r2
 800263c:	6922      	ldr	r2, [r4, #16]
 800263e:	bf08      	it	eq
 8002640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002644:	4293      	cmp	r3, r2
 8002646:	bfc4      	itt	gt
 8002648:	1a9b      	subgt	r3, r3, r2
 800264a:	18ed      	addgt	r5, r5, r3
 800264c:	341a      	adds	r4, #26
 800264e:	42b5      	cmp	r5, r6
 8002650:	d11a      	bne.n	8002688 <_printf_common+0xcc>
 8002652:	2000      	movs	r0, #0
 8002654:	e008      	b.n	8002668 <_printf_common+0xac>
 8002656:	2301      	movs	r3, #1
 8002658:	4652      	mov	r2, sl
 800265a:	4649      	mov	r1, r9
 800265c:	4638      	mov	r0, r7
 800265e:	47c0      	blx	r8
 8002660:	3001      	adds	r0, #1
 8002662:	d103      	bne.n	800266c <_printf_common+0xb0>
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800266c:	3501      	adds	r5, #1
 800266e:	e7c4      	b.n	80025fa <_printf_common+0x3e>
 8002670:	2030      	movs	r0, #48	; 0x30
 8002672:	18e1      	adds	r1, r4, r3
 8002674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800267e:	4422      	add	r2, r4
 8002680:	3302      	adds	r3, #2
 8002682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002686:	e7c5      	b.n	8002614 <_printf_common+0x58>
 8002688:	2301      	movs	r3, #1
 800268a:	4622      	mov	r2, r4
 800268c:	4649      	mov	r1, r9
 800268e:	4638      	mov	r0, r7
 8002690:	47c0      	blx	r8
 8002692:	3001      	adds	r0, #1
 8002694:	d0e6      	beq.n	8002664 <_printf_common+0xa8>
 8002696:	3601      	adds	r6, #1
 8002698:	e7d9      	b.n	800264e <_printf_common+0x92>
	...

0800269c <_printf_i>:
 800269c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026a0:	7e0f      	ldrb	r7, [r1, #24]
 80026a2:	4691      	mov	r9, r2
 80026a4:	2f78      	cmp	r7, #120	; 0x78
 80026a6:	4680      	mov	r8, r0
 80026a8:	460c      	mov	r4, r1
 80026aa:	469a      	mov	sl, r3
 80026ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026b2:	d807      	bhi.n	80026c4 <_printf_i+0x28>
 80026b4:	2f62      	cmp	r7, #98	; 0x62
 80026b6:	d80a      	bhi.n	80026ce <_printf_i+0x32>
 80026b8:	2f00      	cmp	r7, #0
 80026ba:	f000 80d9 	beq.w	8002870 <_printf_i+0x1d4>
 80026be:	2f58      	cmp	r7, #88	; 0x58
 80026c0:	f000 80a4 	beq.w	800280c <_printf_i+0x170>
 80026c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026cc:	e03a      	b.n	8002744 <_printf_i+0xa8>
 80026ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026d2:	2b15      	cmp	r3, #21
 80026d4:	d8f6      	bhi.n	80026c4 <_printf_i+0x28>
 80026d6:	a101      	add	r1, pc, #4	; (adr r1, 80026dc <_printf_i+0x40>)
 80026d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026dc:	08002735 	.word	0x08002735
 80026e0:	08002749 	.word	0x08002749
 80026e4:	080026c5 	.word	0x080026c5
 80026e8:	080026c5 	.word	0x080026c5
 80026ec:	080026c5 	.word	0x080026c5
 80026f0:	080026c5 	.word	0x080026c5
 80026f4:	08002749 	.word	0x08002749
 80026f8:	080026c5 	.word	0x080026c5
 80026fc:	080026c5 	.word	0x080026c5
 8002700:	080026c5 	.word	0x080026c5
 8002704:	080026c5 	.word	0x080026c5
 8002708:	08002857 	.word	0x08002857
 800270c:	08002779 	.word	0x08002779
 8002710:	08002839 	.word	0x08002839
 8002714:	080026c5 	.word	0x080026c5
 8002718:	080026c5 	.word	0x080026c5
 800271c:	08002879 	.word	0x08002879
 8002720:	080026c5 	.word	0x080026c5
 8002724:	08002779 	.word	0x08002779
 8002728:	080026c5 	.word	0x080026c5
 800272c:	080026c5 	.word	0x080026c5
 8002730:	08002841 	.word	0x08002841
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	1d1a      	adds	r2, r3, #4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	602a      	str	r2, [r5, #0]
 800273c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002744:	2301      	movs	r3, #1
 8002746:	e0a4      	b.n	8002892 <_printf_i+0x1f6>
 8002748:	6820      	ldr	r0, [r4, #0]
 800274a:	6829      	ldr	r1, [r5, #0]
 800274c:	0606      	lsls	r6, r0, #24
 800274e:	f101 0304 	add.w	r3, r1, #4
 8002752:	d50a      	bpl.n	800276a <_printf_i+0xce>
 8002754:	680e      	ldr	r6, [r1, #0]
 8002756:	602b      	str	r3, [r5, #0]
 8002758:	2e00      	cmp	r6, #0
 800275a:	da03      	bge.n	8002764 <_printf_i+0xc8>
 800275c:	232d      	movs	r3, #45	; 0x2d
 800275e:	4276      	negs	r6, r6
 8002760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002764:	230a      	movs	r3, #10
 8002766:	485e      	ldr	r0, [pc, #376]	; (80028e0 <_printf_i+0x244>)
 8002768:	e019      	b.n	800279e <_printf_i+0x102>
 800276a:	680e      	ldr	r6, [r1, #0]
 800276c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002770:	602b      	str	r3, [r5, #0]
 8002772:	bf18      	it	ne
 8002774:	b236      	sxthne	r6, r6
 8002776:	e7ef      	b.n	8002758 <_printf_i+0xbc>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	6820      	ldr	r0, [r4, #0]
 800277c:	1d19      	adds	r1, r3, #4
 800277e:	6029      	str	r1, [r5, #0]
 8002780:	0601      	lsls	r1, r0, #24
 8002782:	d501      	bpl.n	8002788 <_printf_i+0xec>
 8002784:	681e      	ldr	r6, [r3, #0]
 8002786:	e002      	b.n	800278e <_printf_i+0xf2>
 8002788:	0646      	lsls	r6, r0, #25
 800278a:	d5fb      	bpl.n	8002784 <_printf_i+0xe8>
 800278c:	881e      	ldrh	r6, [r3, #0]
 800278e:	2f6f      	cmp	r7, #111	; 0x6f
 8002790:	bf0c      	ite	eq
 8002792:	2308      	moveq	r3, #8
 8002794:	230a      	movne	r3, #10
 8002796:	4852      	ldr	r0, [pc, #328]	; (80028e0 <_printf_i+0x244>)
 8002798:	2100      	movs	r1, #0
 800279a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800279e:	6865      	ldr	r5, [r4, #4]
 80027a0:	2d00      	cmp	r5, #0
 80027a2:	bfa8      	it	ge
 80027a4:	6821      	ldrge	r1, [r4, #0]
 80027a6:	60a5      	str	r5, [r4, #8]
 80027a8:	bfa4      	itt	ge
 80027aa:	f021 0104 	bicge.w	r1, r1, #4
 80027ae:	6021      	strge	r1, [r4, #0]
 80027b0:	b90e      	cbnz	r6, 80027b6 <_printf_i+0x11a>
 80027b2:	2d00      	cmp	r5, #0
 80027b4:	d04d      	beq.n	8002852 <_printf_i+0x1b6>
 80027b6:	4615      	mov	r5, r2
 80027b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80027bc:	fb03 6711 	mls	r7, r3, r1, r6
 80027c0:	5dc7      	ldrb	r7, [r0, r7]
 80027c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027c6:	4637      	mov	r7, r6
 80027c8:	42bb      	cmp	r3, r7
 80027ca:	460e      	mov	r6, r1
 80027cc:	d9f4      	bls.n	80027b8 <_printf_i+0x11c>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d10b      	bne.n	80027ea <_printf_i+0x14e>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	07de      	lsls	r6, r3, #31
 80027d6:	d508      	bpl.n	80027ea <_printf_i+0x14e>
 80027d8:	6923      	ldr	r3, [r4, #16]
 80027da:	6861      	ldr	r1, [r4, #4]
 80027dc:	4299      	cmp	r1, r3
 80027de:	bfde      	ittt	le
 80027e0:	2330      	movle	r3, #48	; 0x30
 80027e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027ea:	1b52      	subs	r2, r2, r5
 80027ec:	6122      	str	r2, [r4, #16]
 80027ee:	464b      	mov	r3, r9
 80027f0:	4621      	mov	r1, r4
 80027f2:	4640      	mov	r0, r8
 80027f4:	f8cd a000 	str.w	sl, [sp]
 80027f8:	aa03      	add	r2, sp, #12
 80027fa:	f7ff fedf 	bl	80025bc <_printf_common>
 80027fe:	3001      	adds	r0, #1
 8002800:	d14c      	bne.n	800289c <_printf_i+0x200>
 8002802:	f04f 30ff 	mov.w	r0, #4294967295
 8002806:	b004      	add	sp, #16
 8002808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800280c:	4834      	ldr	r0, [pc, #208]	; (80028e0 <_printf_i+0x244>)
 800280e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002812:	6829      	ldr	r1, [r5, #0]
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	f851 6b04 	ldr.w	r6, [r1], #4
 800281a:	6029      	str	r1, [r5, #0]
 800281c:	061d      	lsls	r5, r3, #24
 800281e:	d514      	bpl.n	800284a <_printf_i+0x1ae>
 8002820:	07df      	lsls	r7, r3, #31
 8002822:	bf44      	itt	mi
 8002824:	f043 0320 	orrmi.w	r3, r3, #32
 8002828:	6023      	strmi	r3, [r4, #0]
 800282a:	b91e      	cbnz	r6, 8002834 <_printf_i+0x198>
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	f023 0320 	bic.w	r3, r3, #32
 8002832:	6023      	str	r3, [r4, #0]
 8002834:	2310      	movs	r3, #16
 8002836:	e7af      	b.n	8002798 <_printf_i+0xfc>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	f043 0320 	orr.w	r3, r3, #32
 800283e:	6023      	str	r3, [r4, #0]
 8002840:	2378      	movs	r3, #120	; 0x78
 8002842:	4828      	ldr	r0, [pc, #160]	; (80028e4 <_printf_i+0x248>)
 8002844:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002848:	e7e3      	b.n	8002812 <_printf_i+0x176>
 800284a:	0659      	lsls	r1, r3, #25
 800284c:	bf48      	it	mi
 800284e:	b2b6      	uxthmi	r6, r6
 8002850:	e7e6      	b.n	8002820 <_printf_i+0x184>
 8002852:	4615      	mov	r5, r2
 8002854:	e7bb      	b.n	80027ce <_printf_i+0x132>
 8002856:	682b      	ldr	r3, [r5, #0]
 8002858:	6826      	ldr	r6, [r4, #0]
 800285a:	1d18      	adds	r0, r3, #4
 800285c:	6961      	ldr	r1, [r4, #20]
 800285e:	6028      	str	r0, [r5, #0]
 8002860:	0635      	lsls	r5, r6, #24
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	d501      	bpl.n	800286a <_printf_i+0x1ce>
 8002866:	6019      	str	r1, [r3, #0]
 8002868:	e002      	b.n	8002870 <_printf_i+0x1d4>
 800286a:	0670      	lsls	r0, r6, #25
 800286c:	d5fb      	bpl.n	8002866 <_printf_i+0x1ca>
 800286e:	8019      	strh	r1, [r3, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	4615      	mov	r5, r2
 8002874:	6123      	str	r3, [r4, #16]
 8002876:	e7ba      	b.n	80027ee <_printf_i+0x152>
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	602a      	str	r2, [r5, #0]
 8002880:	681d      	ldr	r5, [r3, #0]
 8002882:	6862      	ldr	r2, [r4, #4]
 8002884:	4628      	mov	r0, r5
 8002886:	f000 f82f 	bl	80028e8 <memchr>
 800288a:	b108      	cbz	r0, 8002890 <_printf_i+0x1f4>
 800288c:	1b40      	subs	r0, r0, r5
 800288e:	6060      	str	r0, [r4, #4]
 8002890:	6863      	ldr	r3, [r4, #4]
 8002892:	6123      	str	r3, [r4, #16]
 8002894:	2300      	movs	r3, #0
 8002896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800289a:	e7a8      	b.n	80027ee <_printf_i+0x152>
 800289c:	462a      	mov	r2, r5
 800289e:	4649      	mov	r1, r9
 80028a0:	4640      	mov	r0, r8
 80028a2:	6923      	ldr	r3, [r4, #16]
 80028a4:	47d0      	blx	sl
 80028a6:	3001      	adds	r0, #1
 80028a8:	d0ab      	beq.n	8002802 <_printf_i+0x166>
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	079b      	lsls	r3, r3, #30
 80028ae:	d413      	bmi.n	80028d8 <_printf_i+0x23c>
 80028b0:	68e0      	ldr	r0, [r4, #12]
 80028b2:	9b03      	ldr	r3, [sp, #12]
 80028b4:	4298      	cmp	r0, r3
 80028b6:	bfb8      	it	lt
 80028b8:	4618      	movlt	r0, r3
 80028ba:	e7a4      	b.n	8002806 <_printf_i+0x16a>
 80028bc:	2301      	movs	r3, #1
 80028be:	4632      	mov	r2, r6
 80028c0:	4649      	mov	r1, r9
 80028c2:	4640      	mov	r0, r8
 80028c4:	47d0      	blx	sl
 80028c6:	3001      	adds	r0, #1
 80028c8:	d09b      	beq.n	8002802 <_printf_i+0x166>
 80028ca:	3501      	adds	r5, #1
 80028cc:	68e3      	ldr	r3, [r4, #12]
 80028ce:	9903      	ldr	r1, [sp, #12]
 80028d0:	1a5b      	subs	r3, r3, r1
 80028d2:	42ab      	cmp	r3, r5
 80028d4:	dcf2      	bgt.n	80028bc <_printf_i+0x220>
 80028d6:	e7eb      	b.n	80028b0 <_printf_i+0x214>
 80028d8:	2500      	movs	r5, #0
 80028da:	f104 0619 	add.w	r6, r4, #25
 80028de:	e7f5      	b.n	80028cc <_printf_i+0x230>
 80028e0:	08002c27 	.word	0x08002c27
 80028e4:	08002c38 	.word	0x08002c38

080028e8 <memchr>:
 80028e8:	4603      	mov	r3, r0
 80028ea:	b510      	push	{r4, lr}
 80028ec:	b2c9      	uxtb	r1, r1
 80028ee:	4402      	add	r2, r0
 80028f0:	4293      	cmp	r3, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	d101      	bne.n	80028fa <memchr+0x12>
 80028f6:	2000      	movs	r0, #0
 80028f8:	e003      	b.n	8002902 <memchr+0x1a>
 80028fa:	7804      	ldrb	r4, [r0, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	428c      	cmp	r4, r1
 8002900:	d1f6      	bne.n	80028f0 <memchr+0x8>
 8002902:	bd10      	pop	{r4, pc}

08002904 <memcpy>:
 8002904:	440a      	add	r2, r1
 8002906:	4291      	cmp	r1, r2
 8002908:	f100 33ff 	add.w	r3, r0, #4294967295
 800290c:	d100      	bne.n	8002910 <memcpy+0xc>
 800290e:	4770      	bx	lr
 8002910:	b510      	push	{r4, lr}
 8002912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002916:	4291      	cmp	r1, r2
 8002918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800291c:	d1f9      	bne.n	8002912 <memcpy+0xe>
 800291e:	bd10      	pop	{r4, pc}

08002920 <memmove>:
 8002920:	4288      	cmp	r0, r1
 8002922:	b510      	push	{r4, lr}
 8002924:	eb01 0402 	add.w	r4, r1, r2
 8002928:	d902      	bls.n	8002930 <memmove+0x10>
 800292a:	4284      	cmp	r4, r0
 800292c:	4623      	mov	r3, r4
 800292e:	d807      	bhi.n	8002940 <memmove+0x20>
 8002930:	1e43      	subs	r3, r0, #1
 8002932:	42a1      	cmp	r1, r4
 8002934:	d008      	beq.n	8002948 <memmove+0x28>
 8002936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800293a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800293e:	e7f8      	b.n	8002932 <memmove+0x12>
 8002940:	4601      	mov	r1, r0
 8002942:	4402      	add	r2, r0
 8002944:	428a      	cmp	r2, r1
 8002946:	d100      	bne.n	800294a <memmove+0x2a>
 8002948:	bd10      	pop	{r4, pc}
 800294a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800294e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002952:	e7f7      	b.n	8002944 <memmove+0x24>

08002954 <_free_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4605      	mov	r5, r0
 8002958:	2900      	cmp	r1, #0
 800295a:	d040      	beq.n	80029de <_free_r+0x8a>
 800295c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002960:	1f0c      	subs	r4, r1, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	18e4      	addlt	r4, r4, r3
 8002968:	f000 f910 	bl	8002b8c <__malloc_lock>
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <_free_r+0x8c>)
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	b933      	cbnz	r3, 8002980 <_free_r+0x2c>
 8002972:	6063      	str	r3, [r4, #4]
 8002974:	6014      	str	r4, [r2, #0]
 8002976:	4628      	mov	r0, r5
 8002978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800297c:	f000 b90c 	b.w	8002b98 <__malloc_unlock>
 8002980:	42a3      	cmp	r3, r4
 8002982:	d908      	bls.n	8002996 <_free_r+0x42>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	1821      	adds	r1, r4, r0
 8002988:	428b      	cmp	r3, r1
 800298a:	bf01      	itttt	eq
 800298c:	6819      	ldreq	r1, [r3, #0]
 800298e:	685b      	ldreq	r3, [r3, #4]
 8002990:	1809      	addeq	r1, r1, r0
 8002992:	6021      	streq	r1, [r4, #0]
 8002994:	e7ed      	b.n	8002972 <_free_r+0x1e>
 8002996:	461a      	mov	r2, r3
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	b10b      	cbz	r3, 80029a0 <_free_r+0x4c>
 800299c:	42a3      	cmp	r3, r4
 800299e:	d9fa      	bls.n	8002996 <_free_r+0x42>
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	1850      	adds	r0, r2, r1
 80029a4:	42a0      	cmp	r0, r4
 80029a6:	d10b      	bne.n	80029c0 <_free_r+0x6c>
 80029a8:	6820      	ldr	r0, [r4, #0]
 80029aa:	4401      	add	r1, r0
 80029ac:	1850      	adds	r0, r2, r1
 80029ae:	4283      	cmp	r3, r0
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	d1e0      	bne.n	8002976 <_free_r+0x22>
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4401      	add	r1, r0
 80029ba:	6011      	str	r1, [r2, #0]
 80029bc:	6053      	str	r3, [r2, #4]
 80029be:	e7da      	b.n	8002976 <_free_r+0x22>
 80029c0:	d902      	bls.n	80029c8 <_free_r+0x74>
 80029c2:	230c      	movs	r3, #12
 80029c4:	602b      	str	r3, [r5, #0]
 80029c6:	e7d6      	b.n	8002976 <_free_r+0x22>
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	1821      	adds	r1, r4, r0
 80029cc:	428b      	cmp	r3, r1
 80029ce:	bf01      	itttt	eq
 80029d0:	6819      	ldreq	r1, [r3, #0]
 80029d2:	685b      	ldreq	r3, [r3, #4]
 80029d4:	1809      	addeq	r1, r1, r0
 80029d6:	6021      	streq	r1, [r4, #0]
 80029d8:	6063      	str	r3, [r4, #4]
 80029da:	6054      	str	r4, [r2, #4]
 80029dc:	e7cb      	b.n	8002976 <_free_r+0x22>
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	2000010c 	.word	0x2000010c

080029e4 <sbrk_aligned>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	4e0e      	ldr	r6, [pc, #56]	; (8002a20 <sbrk_aligned+0x3c>)
 80029e8:	460c      	mov	r4, r1
 80029ea:	6831      	ldr	r1, [r6, #0]
 80029ec:	4605      	mov	r5, r0
 80029ee:	b911      	cbnz	r1, 80029f6 <sbrk_aligned+0x12>
 80029f0:	f000 f8bc 	bl	8002b6c <_sbrk_r>
 80029f4:	6030      	str	r0, [r6, #0]
 80029f6:	4621      	mov	r1, r4
 80029f8:	4628      	mov	r0, r5
 80029fa:	f000 f8b7 	bl	8002b6c <_sbrk_r>
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d00a      	beq.n	8002a18 <sbrk_aligned+0x34>
 8002a02:	1cc4      	adds	r4, r0, #3
 8002a04:	f024 0403 	bic.w	r4, r4, #3
 8002a08:	42a0      	cmp	r0, r4
 8002a0a:	d007      	beq.n	8002a1c <sbrk_aligned+0x38>
 8002a0c:	1a21      	subs	r1, r4, r0
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f000 f8ac 	bl	8002b6c <_sbrk_r>
 8002a14:	3001      	adds	r0, #1
 8002a16:	d101      	bne.n	8002a1c <sbrk_aligned+0x38>
 8002a18:	f04f 34ff 	mov.w	r4, #4294967295
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	20000110 	.word	0x20000110

08002a24 <_malloc_r>:
 8002a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a28:	1ccd      	adds	r5, r1, #3
 8002a2a:	f025 0503 	bic.w	r5, r5, #3
 8002a2e:	3508      	adds	r5, #8
 8002a30:	2d0c      	cmp	r5, #12
 8002a32:	bf38      	it	cc
 8002a34:	250c      	movcc	r5, #12
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	4607      	mov	r7, r0
 8002a3a:	db01      	blt.n	8002a40 <_malloc_r+0x1c>
 8002a3c:	42a9      	cmp	r1, r5
 8002a3e:	d905      	bls.n	8002a4c <_malloc_r+0x28>
 8002a40:	230c      	movs	r3, #12
 8002a42:	2600      	movs	r6, #0
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4630      	mov	r0, r6
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a4c:	4e2e      	ldr	r6, [pc, #184]	; (8002b08 <_malloc_r+0xe4>)
 8002a4e:	f000 f89d 	bl	8002b8c <__malloc_lock>
 8002a52:	6833      	ldr	r3, [r6, #0]
 8002a54:	461c      	mov	r4, r3
 8002a56:	bb34      	cbnz	r4, 8002aa6 <_malloc_r+0x82>
 8002a58:	4629      	mov	r1, r5
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	f7ff ffc2 	bl	80029e4 <sbrk_aligned>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	4604      	mov	r4, r0
 8002a64:	d14d      	bne.n	8002b02 <_malloc_r+0xde>
 8002a66:	6834      	ldr	r4, [r6, #0]
 8002a68:	4626      	mov	r6, r4
 8002a6a:	2e00      	cmp	r6, #0
 8002a6c:	d140      	bne.n	8002af0 <_malloc_r+0xcc>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	4631      	mov	r1, r6
 8002a72:	4638      	mov	r0, r7
 8002a74:	eb04 0803 	add.w	r8, r4, r3
 8002a78:	f000 f878 	bl	8002b6c <_sbrk_r>
 8002a7c:	4580      	cmp	r8, r0
 8002a7e:	d13a      	bne.n	8002af6 <_malloc_r+0xd2>
 8002a80:	6821      	ldr	r1, [r4, #0]
 8002a82:	3503      	adds	r5, #3
 8002a84:	1a6d      	subs	r5, r5, r1
 8002a86:	f025 0503 	bic.w	r5, r5, #3
 8002a8a:	3508      	adds	r5, #8
 8002a8c:	2d0c      	cmp	r5, #12
 8002a8e:	bf38      	it	cc
 8002a90:	250c      	movcc	r5, #12
 8002a92:	4638      	mov	r0, r7
 8002a94:	4629      	mov	r1, r5
 8002a96:	f7ff ffa5 	bl	80029e4 <sbrk_aligned>
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d02b      	beq.n	8002af6 <_malloc_r+0xd2>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	442b      	add	r3, r5
 8002aa2:	6023      	str	r3, [r4, #0]
 8002aa4:	e00e      	b.n	8002ac4 <_malloc_r+0xa0>
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	1b52      	subs	r2, r2, r5
 8002aaa:	d41e      	bmi.n	8002aea <_malloc_r+0xc6>
 8002aac:	2a0b      	cmp	r2, #11
 8002aae:	d916      	bls.n	8002ade <_malloc_r+0xba>
 8002ab0:	1961      	adds	r1, r4, r5
 8002ab2:	42a3      	cmp	r3, r4
 8002ab4:	6025      	str	r5, [r4, #0]
 8002ab6:	bf18      	it	ne
 8002ab8:	6059      	strne	r1, [r3, #4]
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	bf08      	it	eq
 8002abe:	6031      	streq	r1, [r6, #0]
 8002ac0:	5162      	str	r2, [r4, r5]
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	4638      	mov	r0, r7
 8002ac6:	f104 060b 	add.w	r6, r4, #11
 8002aca:	f000 f865 	bl	8002b98 <__malloc_unlock>
 8002ace:	f026 0607 	bic.w	r6, r6, #7
 8002ad2:	1d23      	adds	r3, r4, #4
 8002ad4:	1af2      	subs	r2, r6, r3
 8002ad6:	d0b6      	beq.n	8002a46 <_malloc_r+0x22>
 8002ad8:	1b9b      	subs	r3, r3, r6
 8002ada:	50a3      	str	r3, [r4, r2]
 8002adc:	e7b3      	b.n	8002a46 <_malloc_r+0x22>
 8002ade:	6862      	ldr	r2, [r4, #4]
 8002ae0:	42a3      	cmp	r3, r4
 8002ae2:	bf0c      	ite	eq
 8002ae4:	6032      	streq	r2, [r6, #0]
 8002ae6:	605a      	strne	r2, [r3, #4]
 8002ae8:	e7ec      	b.n	8002ac4 <_malloc_r+0xa0>
 8002aea:	4623      	mov	r3, r4
 8002aec:	6864      	ldr	r4, [r4, #4]
 8002aee:	e7b2      	b.n	8002a56 <_malloc_r+0x32>
 8002af0:	4634      	mov	r4, r6
 8002af2:	6876      	ldr	r6, [r6, #4]
 8002af4:	e7b9      	b.n	8002a6a <_malloc_r+0x46>
 8002af6:	230c      	movs	r3, #12
 8002af8:	4638      	mov	r0, r7
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	f000 f84c 	bl	8002b98 <__malloc_unlock>
 8002b00:	e7a1      	b.n	8002a46 <_malloc_r+0x22>
 8002b02:	6025      	str	r5, [r4, #0]
 8002b04:	e7de      	b.n	8002ac4 <_malloc_r+0xa0>
 8002b06:	bf00      	nop
 8002b08:	2000010c 	.word	0x2000010c

08002b0c <_realloc_r>:
 8002b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b10:	4680      	mov	r8, r0
 8002b12:	4614      	mov	r4, r2
 8002b14:	460e      	mov	r6, r1
 8002b16:	b921      	cbnz	r1, 8002b22 <_realloc_r+0x16>
 8002b18:	4611      	mov	r1, r2
 8002b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1e:	f7ff bf81 	b.w	8002a24 <_malloc_r>
 8002b22:	b92a      	cbnz	r2, 8002b30 <_realloc_r+0x24>
 8002b24:	f7ff ff16 	bl	8002954 <_free_r>
 8002b28:	4625      	mov	r5, r4
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b30:	f000 f838 	bl	8002ba4 <_malloc_usable_size_r>
 8002b34:	4284      	cmp	r4, r0
 8002b36:	4607      	mov	r7, r0
 8002b38:	d802      	bhi.n	8002b40 <_realloc_r+0x34>
 8002b3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b3e:	d812      	bhi.n	8002b66 <_realloc_r+0x5a>
 8002b40:	4621      	mov	r1, r4
 8002b42:	4640      	mov	r0, r8
 8002b44:	f7ff ff6e 	bl	8002a24 <_malloc_r>
 8002b48:	4605      	mov	r5, r0
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d0ed      	beq.n	8002b2a <_realloc_r+0x1e>
 8002b4e:	42bc      	cmp	r4, r7
 8002b50:	4622      	mov	r2, r4
 8002b52:	4631      	mov	r1, r6
 8002b54:	bf28      	it	cs
 8002b56:	463a      	movcs	r2, r7
 8002b58:	f7ff fed4 	bl	8002904 <memcpy>
 8002b5c:	4631      	mov	r1, r6
 8002b5e:	4640      	mov	r0, r8
 8002b60:	f7ff fef8 	bl	8002954 <_free_r>
 8002b64:	e7e1      	b.n	8002b2a <_realloc_r+0x1e>
 8002b66:	4635      	mov	r5, r6
 8002b68:	e7df      	b.n	8002b2a <_realloc_r+0x1e>
	...

08002b6c <_sbrk_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4d05      	ldr	r5, [pc, #20]	; (8002b88 <_sbrk_r+0x1c>)
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fd fcd6 	bl	8000528 <_sbrk>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_sbrk_r+0x1a>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_sbrk_r+0x1a>
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	20000114 	.word	0x20000114

08002b8c <__malloc_lock>:
 8002b8c:	4801      	ldr	r0, [pc, #4]	; (8002b94 <__malloc_lock+0x8>)
 8002b8e:	f000 b811 	b.w	8002bb4 <__retarget_lock_acquire_recursive>
 8002b92:	bf00      	nop
 8002b94:	20000118 	.word	0x20000118

08002b98 <__malloc_unlock>:
 8002b98:	4801      	ldr	r0, [pc, #4]	; (8002ba0 <__malloc_unlock+0x8>)
 8002b9a:	f000 b80c 	b.w	8002bb6 <__retarget_lock_release_recursive>
 8002b9e:	bf00      	nop
 8002ba0:	20000118 	.word	0x20000118

08002ba4 <_malloc_usable_size_r>:
 8002ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ba8:	1f18      	subs	r0, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bfbc      	itt	lt
 8002bae:	580b      	ldrlt	r3, [r1, r0]
 8002bb0:	18c0      	addlt	r0, r0, r3
 8002bb2:	4770      	bx	lr

08002bb4 <__retarget_lock_acquire_recursive>:
 8002bb4:	4770      	bx	lr

08002bb6 <__retarget_lock_release_recursive>:
 8002bb6:	4770      	bx	lr

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
